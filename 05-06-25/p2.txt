
import java.util.;

class Codechef {
    public static void main (String[] args){
        Tree t = new Tree(new int[]{1,2,3,-1,-1,5,-1,-1,3,6,-1,-1,7,-1,-1});
        
        System.out.print(Preorder );
        t.preOrder();
        System.out.println();

        System.out.print(Inorder );
        t.inOrder();
        System.out.println();

        System.out.print(Postorder );
        t.postOrder();
        System.out.println();
    }
}

class Node {
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class Tree {
    Node root;
    int index = -1;

    Tree(int[] nodes){
        this.root = buildTreeUsingArray(nodes);
    }

    public Node buildTreeUsingArray(int[] nodes){
        index++;
        if(index = nodes.length  nodes[index] == -1){
            return null;
        }
        Node newNode = new Node(nodes[index]);
        newNode.left = buildTreeUsingArray(nodes);
        newNode.right = buildTreeUsingArray(nodes);
        return newNode;
    }

    public void preOrder(){
        preOrderHelper(root);
    }

    private void preOrderHelper(Node temp){
        if(temp == null) return;
        System.out.print(temp.data +  );
        preOrderHelper(temp.left);
        preOrderHelper(temp.right);
    }

    public void postOrder(){
        postOrderHelper(root);
    }

    private void postOrderHelper(Node temp){
        if(temp == null) return;
        postOrderHelper(temp.left);
        postOrderHelper(temp.right);
        System.out.print(temp.data +  );
    }

    public void inOrder(){
        inOrderHelper(root);
    }

    private void inOrderHelper(Node temp){
        if(temp == null) return;
        inOrderHelper(temp.left);
        System.out.print(temp.data +  );
        inOrderHelper(temp.right);
    }
}

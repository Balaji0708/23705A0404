import java.util.Queue;
import java.util.LinkedList;

public class BFSExample {
    private int V;
    private LinkedList<Integer>[] adjList;

    @SuppressWarnings("unchecked")
    public BFSExample(int V) {
        this.V = V;
        adjList = new LinkedList[V];
        for(int i = 0; i < V; i++) {
            adjList[i] = new LinkedList<>();
        }
    }
    
    
    public void addEdge(int u, int v) {
        adjList[u].add(v);
        adjList[v].add(u);
    }

    public void bfs(int source) {
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
        visited[source] = true;
        queue.offer(source);

        System.out.print("BFS traversal starting from vertex " + source + ": ");
        while (!queue.isEmpty()) {
            int u = queue.poll();
            System.out.print(u + " ");
            for (int v : adjList[u]) {
                if (!visited[v]) {
                    visited[v] = true;
                    queue.offer(v);
                }
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        BFSExample graph = new BFSExample(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);

        graph.bfs(0);
    }
}
